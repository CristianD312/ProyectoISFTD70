/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Pantallas.Configuracion;

import Logica.Conexion;
import Objetos.Carrera;
import Objetos.Profesor;
import Objetos.Salon;

import javax.swing.*;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Objects;

/**
 *
 * @author dario
 */
public class ModificarSalon extends javax.swing.JFrame {
    Conexion conexion;
    Salon salon;
    /**
     * Creates new form ModificarProfesor
     */
    public ModificarSalon(Conexion conexion, Salon salon) {
        this.conexion = conexion;
        this.salon = salon;
        initComponents();
        // en caso de usar este constructor estoy modificando un salon, el siguiente codigo carga los datos del mismo dentro de las checkbox:
            if(salon.isTamano()){
                comboBoxTamano.setSelectedItem(0);
            }else{
                comboBoxTamano.setSelectedItem(1);
            }
            proyector.setSelected(this.salon.isProyector());
            TV.setSelected(this.salon.isTV());
            cableVGA.setSelected(this.salon.isCableVGA());
            cableHDMI.setSelected(this.salon.isCableHDMI());
            cableAudio.setSelected(this.salon.isCableAudio());
            interlock220V.setSelected(this.salon.isInterlock220V());
            conversor.setSelected(this.salon.isConversor());
            //cuando apretas la "x" cierra unicamente la ventana del formulario
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }
    public ModificarSalon(Conexion conexion) {
        //en caso de utilizar este constructor se esta cargando un salon nuevo y carga el formulario sin nada selecciondo
        this.conexion = conexion;
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        guardar = new javax.swing.JButton();
        comboBoxTamano = new javax.swing.JComboBox<>();
        proyector = new javax.swing.JCheckBox();
        TV = new javax.swing.JCheckBox();
        cableHDMI = new javax.swing.JCheckBox();
        cableVGA = new javax.swing.JCheckBox();
        interlock220V = new javax.swing.JCheckBox();
        cableAudio = new javax.swing.JCheckBox();
        conversor = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Modificar Profesor");

        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        comboBoxTamano.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Normal", "Grande" }));
        comboBoxTamano.setPreferredSize(new java.awt.Dimension(200, 25));

        proyector.setText("Proyector");
        proyector.setPreferredSize(new java.awt.Dimension(200, 25));
        proyector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proyectorActionPerformed(evt);
            }
        });

        TV.setText("Televisor");
        TV.setPreferredSize(new java.awt.Dimension(200, 25));

        cableHDMI.setText("Cable HDMI");
        cableHDMI.setPreferredSize(new java.awt.Dimension(200, 25));

        cableVGA.setText("Cable VGA");
        cableVGA.setPreferredSize(new java.awt.Dimension(200, 25));

        interlock220V.setText("Cable interlock 220v");
        interlock220V.setPreferredSize(new java.awt.Dimension(200, 25));

        cableAudio.setText("Cable de audio");
        cableAudio.setPreferredSize(new java.awt.Dimension(200, 25));

        conversor.setText("Conversor de señal");
        conversor.setPreferredSize(new java.awt.Dimension(200, 25));

        jLabel1.setText("Tamaño:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(proyector, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(TV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cableHDMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(conversor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cableAudio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(interlock220V, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cableVGA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboBoxTamano, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4))))))
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(guardar))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboBoxTamano, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(proyector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cableHDMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cableVGA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(interlock220V, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cableAudio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(conversor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(guardar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        //en caso de que salon sea diferente de null, es decir, que le pase un salon al formulario para modificar, este algoritmo modifica los valores del objeto existente y los sincroniza con la base de datos
        if(salon != null){
            salon.setTamano(conexion.getConexion(),comboBoxTamano.getSelectedItem()=="Grande");
            salon.setProyector(conexion.getConexion(),rootPaneCheckingEnabled);
            salon.setTV(conexion.getConexion(), rootPaneCheckingEnabled);
            salon.setCableHDMI(conexion.getConexion(), rootPaneCheckingEnabled);
            salon.setCableVGA(conexion.getConexion(), rootPaneCheckingEnabled);
            salon.setInterlock220V(conexion.getConexion(), rootPaneCheckingEnabled);
            salon.setCableAudio(conexion.getConexion(), rootPaneCheckingEnabled);
            salon.setConversor(conexion.getConexion(), rootPaneCheckingEnabled);
        }else{
            //caso contrario crea un salon nuevo con ina id no valida(-1) y lo carga a la base de datos
            salon = new Salon(-1,comboBoxTamano.getSelectedItem()=="Grande", rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
            salon.cargarSalon(conexion.getConexion());
        }
        //cierra el formulario
        this.dispose();
    }//GEN-LAST:event_guardarActionPerformed

    private void proyectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proyectorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_proyectorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModificarSalon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModificarSalon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModificarSalon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModificarSalon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModificarProfesor().setVisible(true);
            }
        });

        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModificarProfesor().setVisible(true);
            }
        });

         */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox TV;
    private javax.swing.JCheckBox cableAudio;
    private javax.swing.JCheckBox cableHDMI;
    private javax.swing.JCheckBox cableVGA;
    private javax.swing.JComboBox<String> comboBoxTamano;
    private javax.swing.JCheckBox conversor;
    private javax.swing.JButton guardar;
    private javax.swing.JCheckBox interlock220V;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JCheckBox proyector;
    // End of variables declaration//GEN-END:variables
}
